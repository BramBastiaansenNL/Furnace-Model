function [lb, ub] = Set_Parameter_Bounds(p_guess, param_subset)
    %% Returns lower and upper bounds for selected parameters
    %
    % p_guess       : initial guess vector
    % param_subset  : cell array of parameter names

    % Define bounds lookup table â†’ [lower_bound, upper_bound]

    bounds_table = struct( ...
        'Cp_alloy',        [800, 1200], ...        % J/kgK
        'mass_alloy',      [0.05, 0.2], ...        % kg
        'A_alloy',         [0.005, 0.1], ...      % m^2
        'h_f_al',          [0, 50], ...
        'h_ms_f',          [0, 50], ...
        'h_f_w',           [0, 50], ...
        'h_h_f',           [0, 50], ...
        'h_out',           [0, 50], ...
        'epsilon_ms',      [0, 1], ...
        'epsilon_w',       [0, 1], ...
        'Cp_f',            [900, 1200], ...        % J/kgK
        'Cp_ms',           [200, 800], ...         % J/kgK
        'mass_ms',         [0.01, 1.0], ...        % kg
        'Cp_wall1',        [200, 1000], ...
        'Cp_wall2',        [200, 1000], ...
        'lambda_wall1',    [0.05, 10], ...         % W/mK
        'lambda_wall2',    [0.05, 100], ...
        'rho_wall1',       [50, 1000], ...         % kg/m^3
        'rho_wall2',       [50, 10000], ...
        'n_heaters',       [1, 20], ...
        'mass_h',          [0.01, 1000], ...
        'A_h',             [0.01, 10], ...
        'Kp',              [0, 100], ...
        'Ki',              [0, 10], ...
        'Kd',              [0, 10] ...
    );

    % Initialize bound vectors
    lb = zeros(size(p_guess));
    ub = zeros(size(p_guess));

    % Build bounds dynamically based on param_subset
    for i = 1:length(param_subset)
        pname = param_subset{i};
        
        if isfield(bounds_table, pname)
            bounds = bounds_table.(pname);
            lb(i) = bounds(1);
            ub(i) = bounds(2);
        else
            error('No bounds defined for parameter "%s"', pname);
        end
    end
end
